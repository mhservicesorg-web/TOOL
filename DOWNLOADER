<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Video Downloader</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            width: 100%;
            max-width: 500px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .header {
            background: #ff0000;
            color: white;
            text-align: center;
            padding: 20px;
        }

        .header h1 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .header p {
            font-size: 14px;
            opacity: 0.9;
        }

        .logo {
            font-size: 32px;
            margin-bottom: 10px;
        }

        .content {
            padding: 25px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .input-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .input-group input:focus {
            border-color: #ff0000;
            outline: none;
        }

        .btn {
            background: #ff0000;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            transition: background 0.3s;
        }

        .btn:hover {
            background: #cc0000;
        }

        .result {
            margin-top: 25px;
            display: none;
        }

        .result.active {
            display: block;
        }

        .video-info {
            display: flex;
            margin-bottom: 20px;
            background: #f9f9f9;
            border-radius: 8px;
            overflow: hidden;
        }

        .thumbnail {
            width: 160px;
            height: 90px;
            background: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 40px;
            color: #ff0000;
        }

        .details {
            padding: 10px 15px;
            flex: 1;
        }

        .details h3 {
            font-size: 16px;
            margin-bottom: 5px;
        }

        .details p {
            font-size: 14px;
            color: #666;
        }

        .download-options {
            margin-top: 15px;
        }

        .option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            background: #f1f1f1;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .option:last-child {
            margin-bottom: 0;
        }

        .quality {
            font-weight: 600;
        }

        .download-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }

        .download-btn:hover {
            background: #218838;
        }

        .footer {
            text-align: center;
            padding: 15px;
            font-size: 12px;
            color: #666;
            border-top: 1px solid #eee;
        }

        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }

        .loading.active {
            display: block;
        }

        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left: 4px solid #ff0000;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .message {
            padding: 15px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
            display: none;
        }

        .error {
            background: #ffcccc;
            color: #ff0000;
            border: 1px solid #ff0000;
        }

        .success {
            background: #ccffcc;
            color: #28a745;
            border: 1px solid #28a745;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üé¨</div>
            <h1>YouTube Video Downloader</h1>
            <p>Download your favorite YouTube videos quickly and easily</p>
        </div>
        
        <div class="content">
            <div class="input-group">
                <label for="url">YouTube Video URL</label>
                <input type="text" id="url" placeholder="Paste YouTube link here...">
            </div>
            
            <button class="btn" id="fetch-btn">Fetch Video</button>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Processing your request...</p>
            </div>
            
            <div class="message error" id="error-message">
                Please enter a valid YouTube URL
            </div>
            
            <div class="result" id="result">
                <div class="video-info">
                    <div class="thumbnail">‚ñ∂Ô∏è</div>
                    <div class="details">
                        <h3 id="video-title">Video Title Here</h3>
                        <p id="video-duration">Duration: 10:30</p>
                        <p id="video-views">Views: 1.5M</p>
                    </div>
                </div>
                
                <div class="download-options">
                    <h3>Download Options:</h3>
                    <div class="option">
                        <span class="quality">MP4 - 1080p</span>
                        <button class="download-btn" data-quality="1080">Download</button>
                    </div>
                    <div class="option">
                        <span class="quality">MP4 - 720p</span>
                        <button class="download-btn" data-quality="720">Download</button>
                    </div>
                    <div class="option">
                        <span class="quality">MP4 - 480p</span>
                        <button class="download-btn" data-quality="480">Download</button>
                    </div>
                    <div class="option">
                        <span class="quality">MP3 - Audio Only</span>
                        <button class="download-btn" data-quality="audio">Download</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>Note: This is a front-end demonstration. Actual downloading requires server-side processing.</p>
            <p>¬© 2023 YouTube Downloader | For demonstration purposes only</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fetchBtn = document.getElementById('fetch-btn');
            const urlInput = document.getElementById('url');
            const resultDiv = document.getElementById('result');
            const loadingDiv = document.getElementById('loading');
            const errorMessage = document.getElementById('error-message');
            const videoTitle = document.getElementById('video-title');
            const videoDuration = document.getElementById('video-duration');
            const videoViews = document.getElementById('video-views');
            const downloadBtns = document.querySelectorAll('.download-btn');
            
            // Sample video data for demonstration
            const sampleVideos = {
                'default': {
                    title: 'Amazing Nature Video',
                    duration: '10:30',
                    views: '1.5M views'
                },
                'https://youtu.be/': {
                    title: 'How to Learn Programming',
                    duration: '15:42',
                    views: '2.3M views'
                },
                'youtube.com/watch': {
                    title: 'Top 10 Travel Destinations',
                    duration: '18:15',
                    views: '3.7M views'
                },
                'youtu.be/': {
                    title: 'Cooking Tutorial: Pasta Carbonara',
                    duration: '8:55',
                    views: '950K views'
                }
            };
            
            // Function to validate YouTube URL
            function isValidYouTubeUrl(url) {
                return url.includes('youtube.com/') || url.includes('youtu.be/');
            }
            
            // Function to get video info based on URL
            function getVideoInfo(url) {
                for (const key in sampleVideos) {
                    if (url.includes(key)) {
                        return sampleVideos[key];
                    }
                }
                return sampleVideos['default'];
            }
            
            // Fetch button click event
            fetchBtn.addEventListener('click', function() {
                const url = urlInput.value.trim();
                
                // Hide previous results and errors
                resultDiv.classList.remove('active');
                errorMessage.style.display = 'none';
                
                if (!url) {
                    errorMessage.textContent = 'Please enter a YouTube URL';
                    errorMessage.style.display = 'block';
                    return;
                }
                
                if (!isValidYouTubeUrl(url)) {
                    errorMessage.textContent = 'Please enter a valid YouTube URL';
                    errorMessage.style.display = 'block';
                    return;
                }
                
                // Show loading
                loadingDiv.classList.add('active');
                
                // Simulate fetching video info (would be server call in real application)
                setTimeout(function() {
                    loadingDiv.classList.remove('active');
                    
                    const videoInfo = getVideoInfo(url);
                    videoTitle.textContent = videoInfo.title;
                    videoDuration.textContent = `Duration: ${videoInfo.duration}`;
                    videoViews.textContent = `Views: ${videoInfo.views}`;
                    
                    resultDiv.classList.add('active');
                }, 2000);
            });
            
            // Download buttons click event
            downloadBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const quality = this.getAttribute('data-quality');
                    const url = urlInput.value.trim();
                    
                    if (!url || !isValidYouTubeUrl(url)) {
                        errorMessage.textContent = 'Please enter a valid YouTube URL first';
                        errorMessage.style.display = 'block';
                        return;
                    }
                    
                    alert(`In a real application, this would download the video in ${quality} quality. \nActual downloading requires server-side processing.`);
                    
                    // Simulate download (would redirect to server endpoint in real application)
                    console.log(`Download requested for: ${url} at ${quality}p`);
                });
            });
            
            // Example URLs for user convenience
            urlInput.addEventListener('focus', function() {
                if (!this.value) {
                    this.placeholder = 'Example: https://www.youtube.com/watch?v=VIDEO_ID';
                }
            });
            
            urlInput.addEventListener('blur', function() {
                this.placeholder = 'Paste YouTube link here...';
            });
        });
    </script>
</body>
</html>
